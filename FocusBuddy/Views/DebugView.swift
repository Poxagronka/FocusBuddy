import SwiftUI

struct DebugView: View {
    @EnvironmentObject var focusTimer: FocusTimer
    @State private var debugOutput: String = ""
    @State private var showConsole = false
    @Environment(\.dismiss) private var dismiss

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    // Header
                    VStack(spacing: 8) {
                        Text("üêõ")
                            .font(.system(size: 32))

                        Text("–û—Ç–ª–∞–¥–∫–∞")
                            .font(.title)
                            .fontWeight(.bold)

                        Text("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
                            .font(.subheadline)
                            .foregroundStyle(.secondary)
                            .multilineTextAlignment(.center)
                    }
                    .padding(.top, 20)

                    VStack(spacing: 16) {
                        // Notification Tests
                        DebugSection(title: "üîî –¢–µ—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π") {
                            VStack(spacing: 12) {
                                DebugButton(
                                    title: "üîê –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                                    subtitle: "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                    color: .purple,
                                    action: { focusTimer.requestNotificationPermissions() }
                                )

                                DebugButton(
                                    title: "üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                                    subtitle: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π",
                                    color: .orange,
                                    action: { focusTimer.debugNotificationPermissions() }
                                )

                                DebugButton(
                                    title: "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                                    subtitle: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                                    color: .blue,
                                    action: { focusTimer.testNotification() }
                                )

                                DebugButton(
                                    title: "üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                    subtitle: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                    color: .green,
                                    action: { focusTimer.testNotification() }
                                )
                            }
                        }

                        // Timer Tests
                        DebugSection(title: "‚è∞ –¢–µ—Å—Ç—ã —Ç–∞–π–º–µ—Ä–∞") {
                            VStack(spacing: 12) {
                                DebugButton(
                                    title: "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (10 —Å–µ–∫)",
                                    subtitle: "–ó–∞–ø—É—Å–∫ 10-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞",
                                    color: .red,
                                    action: { focusTimer.startQuickTest() }
                                )

                                DebugButton(
                                    title: "üß™ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
                                    subtitle: "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ–∞–∑—ã",
                                    color: .indigo,
                                    action: { focusTimer.testRealNotificationFlow() }
                                )

                                DebugButton(
                                    title: "üìä –°—Ç–∞—Ç—É—Å —Ç–∞–π–º–µ—Ä–∞",
                                    subtitle: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                                    color: .teal,
                                    action: { focusTimer.debugCurrentTimerState() }
                                )
                            }
                        }

                        // System Tools
                        DebugSection(title: "üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã") {
                            VStack(spacing: 12) {
                                DebugButton(
                                    title: "üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                                    subtitle: "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                                    color: .cyan,
                                    action: { focusTimer.openNotificationSettings() }
                                )

                                DebugButton(
                                    title: "üî¨ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç",
                                    subtitle: "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                    color: .pink,
                                    action: { focusTimer.testRealNotificationFlow() }
                                )
                            }
                        }

                        // Debug Console
                        VStack(alignment: .leading, spacing: 12) {
                            HStack {
                                Text("üìù –ö–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–∫–∏")
                                    .font(.headline)
                                    .fontWeight(.semibold)

                                Spacer()

                                Button(showConsole ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å") {
                                    showConsole.toggle()
                                }
                                .buttonStyle(.bordered)
                            }

                            if showConsole {
                                ScrollView {
                                    Text(focusTimer.debugOutput.isEmpty ? "–õ–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å..." : focusTimer.debugOutput)
                                        .font(.system(.caption, design: .monospaced))
                                        .padding(12)
                                        .frame(maxWidth: .infinity, alignment: .leading)
                                        .background(Color.black.opacity(0.8))
                                        .foregroundColor(.green)
                                        .cornerRadius(8)
                                }
                                .frame(height: 200)
                                .onChange(of: focusTimer.debugOutput) { _, _ in
                                    // Auto-scroll to bottom when new content is added
                                }
                            }
                        }
                        .padding(20)
                        .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 16))
                    }
                    .padding(.horizontal, 24)

                    Spacer(minLength: 20)
                }
            }
            .navigationTitle("–û—Ç–ª–∞–¥–∫–∞")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–ì–æ—Ç–æ–≤–æ") {
                        dismiss()
                    }
                }
            }
        }
        .frame(width: 600, height: 700)
    }
}

struct DebugSection<Content: View>: View {
    let title: String
    @ViewBuilder let content: Content

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text(title)
                .font(.headline)
                .fontWeight(.semibold)

            content
        }
        .frame(maxWidth: .infinity, alignment: .leading)
        .padding(20)
        .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 16))
    }
}

struct DebugButton: View {
    let title: String
    let subtitle: String
    let color: Color
    let action: () -> Void

    var body: some View {
        Button(action: action) {
            HStack {
                VStack(alignment: .leading, spacing: 2) {
                    Text(title)
                        .font(.system(.body, weight: .medium))
                        .foregroundStyle(color)

                    Text(subtitle)
                        .font(.caption)
                        .foregroundStyle(.secondary)
                }

                Spacer()

                Image(systemName: "chevron.right")
                    .font(.caption)
                    .foregroundStyle(.tertiary)
            }
            .padding(.vertical, 8)
            .padding(.horizontal, 12)
            .background(color.opacity(0.1))
            .cornerRadius(8)
        }
        .buttonStyle(.plain)
    }
}

#Preview {
    DebugView()
        .environmentObject(FocusTimer())
}