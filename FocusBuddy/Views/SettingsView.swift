import SwiftUI
import AppKit

struct SettingsView: View {
    @EnvironmentObject var focusTimer: FocusTimer
    
    var body: some View {
        ScrollView {
            VStack(spacing: 24) {
                // Header
                VStack(spacing: 8) {
                    Text("‚öôÔ∏è")
                        .font(.system(size: 28))
                    
                    Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                        .font(.title2)
                        .fontWeight(.semibold)
                    
                    Text("–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
                        .font(.subheadline)
                        .foregroundStyle(.secondary)
                        .multilineTextAlignment(.center)
                }
                .padding(.top, 20)
                
                VStack(spacing: 20) {
                    // Notifications Settings
                    SettingsSection(title: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏ –∑–≤—É–∫–æ–≤") {
                        VStack(spacing: 12) {
                            SettingsToggle(
                                title: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                description: "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è macOS",
                                isOn: $focusTimer.notificationsEnabled
                            )
                            
                            SettingsToggle(
                                title: "–ó–≤—É–∫–æ–≤—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è",
                                description: "–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã",
                                isOn: $focusTimer.soundEnabled
                            )
                        }
                    }
                    
                    // Timer Durations
                    TimerDurationSettings()
                    
                    // Appearance Settings
                    AppearanceSettings()
                    
                    // Advanced Settings
                    AdvancedSettings()
                    
                    // Debug Section (for development)
                    DebugSection()
                    
                    // About Section
                    AboutSection()
                }
                .padding(.horizontal, 24)
                
                Spacer(minLength: 20)
            }
        }
        .padding(.horizontal, 16)
    }
}

struct SettingsSection<Content: View>: View {
    let title: String
    let description: String
    @ViewBuilder let content: Content
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .font(.headline)
                    .fontWeight(.semibold)
                
                Text(description)
                    .font(.caption)
                    .foregroundStyle(.secondary)
            }
            
            content
        }
        .frame(maxWidth: .infinity, alignment: .leading)
        .padding(20)
        .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 16))
    }
}

struct SettingsToggle: View {
    let title: String
    let description: String
    @Binding var isOn: Bool
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 2) {
                Text(title)
                    .font(.subheadline)
                    .fontWeight(.medium)
                
                Text(description)
                    .font(.caption2)
                    .foregroundStyle(.secondary)
            }
            
            Spacer()
            
            Toggle("", isOn: $isOn)
                .toggleStyle(.switch)
        }
    }
}

struct TimerDurationSettings: View {
    @EnvironmentObject var focusTimer: FocusTimer
    @State private var focusMinutes = 25
    @State private var shortBreakMinutes = 5
    @State private var longBreakMinutes = 15
    
    var body: some View {
        SettingsSection(title: "‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", description: "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã") {
            VStack(spacing: 16) {
                DurationPicker(
                    title: "–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è",
                    value: $focusMinutes,
                    range: 5...120
                )
                
                DurationPicker(
                    title: "–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤",
                    value: $shortBreakMinutes,
                    range: 1...30
                )
                
                DurationPicker(
                    title: "–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤",
                    value: $longBreakMinutes,
                    range: 5...60
                )
            }
        }
        .onAppear {
            focusMinutes = focusTimer.currentPreset.focusMinutes
            shortBreakMinutes = focusTimer.currentPreset.shortBreakMinutes
            longBreakMinutes = focusTimer.currentPreset.longBreakMinutes
        }
    }
}

struct DurationPicker: View {
    let title: String
    @Binding var value: Int
    let range: ClosedRange<Int>
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 2) {
                Text(title)
                    .font(.subheadline)
                    .fontWeight(.medium)
                
                Text("\(value) –º–∏–Ω—É—Ç")
                    .font(.caption2)
                    .foregroundStyle(.secondary)
            }
            
            Spacer()
            
            Stepper(value: $value, in: range) {
                EmptyView()
            }
        }
        .padding(12)
        .background(Color.secondary.opacity(0.3), in: RoundedRectangle(cornerRadius: 8))
    }
}

struct AppearanceSettings: View {
    @AppStorage("preferredColorScheme") private var preferredColorScheme = "system"
    @AppStorage("reducedMotion") private var reducedMotion = false
    @AppStorage("showMenuBarTime") private var showMenuBarTime = true
    
    var body: some View {
        SettingsSection(title: "üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥", description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞") {
            VStack(spacing: 12) {
                HStack {
                    VStack(alignment: .leading, spacing: 2) {
                        Text("–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞")
                            .font(.subheadline)
                            .fontWeight(.medium)
                        
                        Text("–°–∏—Å—Ç–µ–º–Ω–∞—è, —Å–≤–µ—Ç–ª–∞—è –∏–ª–∏ —Ç–µ–º–Ω–∞—è")
                            .font(.caption2)
                            .foregroundStyle(.secondary)
                    }
                    
                    Spacer()
                    
                    Picker("", selection: $preferredColorScheme) {
                        Text("–°–∏—Å—Ç–µ–º–Ω–∞—è").tag("system")
                        Text("–°–≤–µ—Ç–ª–∞—è").tag("light")
                        Text("–¢–µ–º–Ω–∞—è").tag("dark")
                    }
                    .pickerStyle(.menu)
                    .frame(width: 120)
                }
                
                Divider()
                
                SettingsToggle(
                    title: "–í—Ä–µ–º—è –≤ –º–µ–Ω—é",
                    description: "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–µ –º–µ–Ω—é",
                    isOn: $showMenuBarTime
                )
                
                SettingsToggle(
                    title: "–£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è",
                    description: "–ú–µ–Ω—å—à–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ",
                    isOn: $reducedMotion
                )
            }
        }
    }
}

struct AdvancedSettings: View {
    @AppStorage("launchAtLogin") private var launchAtLogin = false
    @AppStorage("hideFromDock") private var hideFromDock = false
    @AppStorage("enableAnalytics") private var enableAnalytics = true
    
    var body: some View {
        SettingsSection(title: "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", description: "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è") {
            VStack(spacing: 12) {
                SettingsToggle(
                    title: "–ó–∞–ø—É—Å–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ",
                    description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ macOS",
                    isOn: $launchAtLogin
                )
                
                SettingsToggle(
                    title: "–°–∫—Ä—ã—Ç—å –∏–∑ Dock",
                    description: "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å—Ç—Ä–æ–∫–µ –º–µ–Ω—é",
                    isOn: $hideFromDock
                )
                
                SettingsToggle(
                    title: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                    description: "–ü–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∞–Ω–æ–Ω–∏–º–Ω–æ)",
                    isOn: $enableAnalytics
                )
                
                Divider()
                
                HStack {
                    Button("–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É") {
                        resetStatistics()
                    }
                    .foregroundStyle(.red)
                    
                    Spacer()
                    
                    Button("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö") {
                        exportData()
                    }
                }
                .font(.footnote)
            }
        }
    }
    
    private func resetStatistics() {
        // Reset statistics logic
        let alert = NSAlert()
        alert.messageText = "–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?"
        alert.informativeText = "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        alert.addButton(withTitle: "–°–±—Ä–æ—Å–∏—Ç—å")
        alert.addButton(withTitle: "–û—Ç–º–µ–Ω–∞")
        alert.alertStyle = .warning
        
        let response = alert.runModal()
        if response == .alertFirstButtonReturn {
            // Reset logic here
        }
    }
    
    private func exportData() {
        // Export data logic
        let savePanel = NSSavePanel()
        savePanel.nameFieldStringValue = "focus-buddy-data.json"
        savePanel.allowedContentTypes = [.json]
        
        savePanel.begin { response in
            if response == .OK {
                // Export logic here
            }
        }
    }
}

struct AboutSection: View {
    var body: some View {
        SettingsSection(title: "‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Focus Buddy") {
            VStack(spacing: 16) {
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Focus Buddy")
                            .font(.title3)
                            .fontWeight(.semibold)
                        
                        Text("–í–µ—Ä—Å–∏—è 1.0.0")
                            .font(.caption)
                            .foregroundStyle(.secondary)
                    }
                    
                    Spacer()
                    
                    Image(systemName: "timer")
                        .font(.system(size: 32))
                        .foregroundStyle(.blue)
                }
                
                Text("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Pomodoro —Ç–∞–π–º–µ—Ä –¥–ª—è macOS. –ü–æ–≤—ã—à–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å —É–º–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
                    .font(.caption)
                    .foregroundStyle(.secondary)
                    .multilineTextAlignment(.leading)
                
                Divider()
                
                HStack {
                    Link("üåê –°–∞–π—Ç", destination: URL(string: "https://focusbuddy.app")!)
                    
                    Spacer()
                    
                    Link("üíå –ü–æ–¥–¥–µ—Ä–∂–∫–∞", destination: URL(string: "mailto:support@focusbuddy.app")!)
                    
                    Spacer()
                    
                    Link("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", destination: URL(string: "macappstore://itunes.apple.com/app/id123456789?action=write-review")!)
                }
                .font(.footnote)
            }
        }
    }
}

struct DebugSection: View {
    @EnvironmentObject var focusTimer: FocusTimer
    @State private var debugOutput: String = ""
    @State private var showConsole = false
    
    var body: some View {
        SettingsSection(title: "üêõ –û—Ç–ª–∞–¥–∫–∞", description: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)") {
            VStack(spacing: 12) {
                // Request Permissions Button
                Button("üîê –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è") {
                    Task {
                        do {
                            try await focusTimer.requestNotificationPermissions()
                        } catch {
                            print("Failed to request permissions: \(error)")
                        }
                    }
                }
                .foregroundStyle(.purple)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 8)
                .background(Color.purple.opacity(0.1))
                .cornerRadius(8)
                
                // Check Permissions Button
                Button("üîî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è") {
                    focusTimer.debugNotificationPermissions()
                }
                .foregroundStyle(.orange)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 8)
                .background(Color.orange.opacity(0.1))
                .cornerRadius(8)
                
                // Open System Settings Button
                Button("üîß –û—Ç–∫—Ä—ã—Ç—å –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") {
                    focusTimer.openNotificationSettings()
                }
                .foregroundStyle(.indigo)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 8)
                .background(Color.indigo.opacity(0.1))
                .cornerRadius(8)
                
                // Notification Test Button
                Button("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ") {
                    focusTimer.testNotification()
                }
                .foregroundStyle(.blue)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 8)
                .background(Color.blue.opacity(0.1))
                .cornerRadius(8)
                
                // System Notification Test
                Button("üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è") {
                    focusTimer.testNotification()
                }
                .foregroundStyle(.teal)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 8)
                .background(Color.teal.opacity(0.1))
                .cornerRadius(8)
                
                // Direct Notification Test
                Button("üì¢ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è") {
                    focusTimer.testNotification()
                }
                .foregroundStyle(.mint)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 8)
                .background(Color.mint.opacity(0.1))
                .cornerRadius(8)
                
                // Test All Methods
                Button("üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç") {
                    focusTimer.testRealNotificationFlow()
                }
                .foregroundStyle(.red)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 8)
                .background(Color.red.opacity(0.1))
                .cornerRadius(8)
                
                // Timer State Debug
                Button("‚è±Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞") {
                    focusTimer.debugCurrentTimerState()
                }
                .foregroundStyle(.green)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 8)
                .background(Color.green.opacity(0.1))
                .cornerRadius(8)
                
                Divider()
                
                // Quick Timer Controls for Testing
                VStack(spacing: 8) {
                    HStack(spacing: 8) {
                        Button("15s Focus") {
                            focusTimer.currentPhase = .focus
                            focusTimer.timeRemaining = 15
                        }
                        .font(.caption)
                        .foregroundStyle(.blue)
                        
                        Button("5s Break") {
                            focusTimer.currentPhase = .shortBreak
                            focusTimer.timeRemaining = 5
                        }
                        .font(.caption)
                        .foregroundStyle(.green)
                        
                        Button("Reset") {
                            focusTimer.stopTimer()
                        }
                        .font(.caption)
                        .foregroundStyle(.red)
                    }
                    
                    Button("‚ö° –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ (10—Å)") {
                        focusTimer.startQuickTest()
                    }
                    .font(.caption)
                    .foregroundStyle(.orange)
                    .padding(.top, 4)
                    
                    // Test real notification
                    VStack(spacing: 4) {
                        HStack(spacing: 8) {
                            Button("üß™ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–∑—ã") {
                                // Simulate phase completion for testing
                                let nextPhase: TimerPhase = focusTimer.currentPhase == .focus ? .shortBreak : .focus
                                focusTimer.debugPhaseCompletion(nextPhase: nextPhase)
                            }
                            .font(.caption2)
                            .foregroundStyle(.purple)
                            
                            Button("üî• –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç") {
                                focusTimer.testRealNotificationFlow()
                            }
                            .font(.caption2)
                            .foregroundStyle(.red)
                        }
                    }
                }
                
                // Console Toggle
                Toggle("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–∫–∏", isOn: $showConsole)
                    .font(.caption)
                
                if showConsole {
                    ScrollView {
                        ScrollViewReader { proxy in
                            Text(focusTimer.debugOutput)
                                .font(.system(.caption2, design: .monospaced))
                                .foregroundStyle(.primary)
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .padding(8)
                                .background(Color.black.opacity(0.05))
                                .cornerRadius(4)
                                .id("debugLog")
                                .onChange(of: focusTimer.debugOutput) {
                                    withAnimation {
                                        proxy.scrollTo("debugLog", anchor: .bottom)
                                    }
                                }
                        }
                    }
                    .frame(height: 120)
                    
                    HStack {
                        Button("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏") {
                            focusTimer.debugOutput = "Debug log:\n"
                        }
                        .font(.caption2)
                        .foregroundStyle(.red)
                        
                        Spacer()
                        
                        Button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å") {
                            NSPasteboard.general.clearContents()
                            NSPasteboard.general.setString(focusTimer.debugOutput, forType: .string)
                        }
                        .font(.caption2)
                        .foregroundStyle(.blue)
                    }
                }
            }
        }
    }
}

#Preview {
    SettingsView()
        .environmentObject(FocusTimer())
        .frame(width: 380, height: 600)
}